import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.StringTokenizer;

/**
 * To evaluate the scalability of Lingo models
 * 
 * Ex.: h1 -- s1 -- s2 -- ... -- s100 -- h2
 * or
 * 1 -- 2 -- 3 -- ... -- 99 -- 100
 * NUM_NODES=100
 */

public class ModeloLingoTopologiaLinear {

	private static int NUM_NODES=1000;
	private static int LINK_BW=500;

	public ModeloLingoTopologiaLinear(){

		//gerarArquivoBrite(); //file .brite
		//gerarArquivoDatacenter(); //file .datacenter
		gerarModeloLingo();

	}//fim construtor

	public void gerarModeloLingo(){


		//Adquire as informacoes da topologia que foi salva em arquivo
		ConfigSettings conf = new ConfigSettings();

		int i=0;
		int j=0;

		//Blocos do arquivo do modelo Lingo
		StringBuffer topologiaLinear = new StringBuffer();		

		topologiaLinear.append(
				"\nMODEL:"+

				"\nSETS:"+

				"\n\nSERVERS /1..2/: SBW;"+

				"\n\nTORS /1..2/: TORBW;"+

				"\n\nMATRIZ_TRAFEGO( SERVERS, TORS ): CUSTO, DADOS;"+

				"\n\n!SWITCHS (Here are included ToRs too);"+
				"\n\nSWITCHS /1.."+ NUM_NODES + "/;"+

				"\n\n!LINKS;"+
				"\nLINKS(SWITCHS, SWITCHS): L"+ 
				"\n, F1_1_"+NUM_NODES+";"+

				"\n\nENDSETS"+

				"\n\n!LINK RESTRICTIONS: UPLINKS AND DOWNLINKS;");

		i=0;
		while(i<NUM_NODES-1){
			//uplink
			topologiaLinear.append("\nL("+(i+1)+","+(i+2)+") = 1000.0;");
			//downlink
			topologiaLinear.append("\nL("+(i+2)+","+(i+1)+") = 1000.0;");
			i++;
		}//end while

		topologiaLinear.append("\n\n[OBJ] MIN ="+ 
				"\n@SUM( MATRIZ_TRAFEGO: CUSTO * DADOS ) +"+
				"\n@SUM(SERVERS(I):"+
				"\n@SUM(TORS(J): CUSTO(I,J)));"+


				"\n\n!CAPACITY OF DESTINATIONS;"+
				"\n@FOR( TORS(J): "+
				"\n@SUM( SERVERS(I): DADOS(I, J)) >= TORBW(J));"+

				"\n\n!DEMANDS OF SERVERS;"+
				"\n@FOR( SERVERS(I): "+
				"\n@SUM( TORS(J): DADOS(I, J)) <= TORBW(I));"
				);

		topologiaLinear.append("\n\n!UPLINK: FLOW GENERATED BY TOR 1;"+
				"\n@SUM(TORS(J)| J #EQ# 1:"+
				"\n@SUM(SERVERS(I)| I #EQ# 1:SBW(I))) = F1_1_"+NUM_NODES+"(1,2);");

		topologiaLinear.append("\n\n!CONSERVATION FLOWS;"+
				"\n!UPLINKS;");

		i=0;
		while(i<NUM_NODES && i+2 < NUM_NODES){ //+2 to not overpass the amount of nodes			
			topologiaLinear.append("\n( F1_1_"+NUM_NODES+"("+(i+1)+","+(i+2)+") ) - " +
					"( F1_1_"+NUM_NODES+"("+(i+2)+","+(i+3)+") ) = 0;");			
			i++;			
		}//end while

		topologiaLinear.append("\n\n!DOWNLINKS;");

		i=0;
		while(i<NUM_NODES && i+2 < NUM_NODES){ //+2 to not overpass the amount of nodes			
			topologiaLinear.append("\n( F1_1_"+NUM_NODES+"("+(i+2)+","+(i+1)+") ) - " +
					"( F1_1_"+NUM_NODES+"("+(i+3)+","+(i+2)+") ) = 0;");			
			i++;			
		}//end while

		topologiaLinear.append(
				"\n\n!JOIN UPLINKS AND DOWNLINKS OF FLOWS;"+
				"\n\n!UP AND DOWN;");
		i=0;
		topologiaLinear.append("\n!SOURCE - DESTINATION;"+
				"\n( F1_1_"+NUM_NODES+"("+(i+1)+","+(i+2)+") ) - " +
				"( F1_1_"+NUM_NODES+"("+(NUM_NODES-1)+","+NUM_NODES+") ) = 0;");

		topologiaLinear.append("\n\n!DOWN AND UP;");
		i=0;
		topologiaLinear.append("\n!DESTINATION - SOURCE;"+
				"\n( F1_1_"+NUM_NODES+"("+(i+2)+","+(i+1)+") ) - " +
				"( F1_1_"+NUM_NODES+"("+(NUM_NODES)+","+(NUM_NODES-1)+") ) = 0;");

		topologiaLinear.append("\n\n!LINK CAPACITY;"+
				"\n@FOR(LINKS(I,J):"+
				"\nF1_1_"+NUM_NODES+"(I,J) <= L(I,J));");
		
		topologiaLinear.append(
				 "\n\nDATA:"+

				"\n\n!GENERATED FLOWS OF TORS;"+
				"\nSBW = " + LINK_BW + " 0 ;"+

				"\n\n!TORS x SERVERS;"+
				"\nCUSTO ="+
				"\n1 1 "+
				"\n1 1"+
				"\n;"+
				"\nENDDATA"+

				"\n\nEND"+
				"\n\n! Terse output mode;"+
				"\nSET TERSEO 1"+
				"\n! Solve the model;"+
				"\nGO"+
				"\n! Open a file;"+
				"\nDIVERT /home/lucio/modeloLingo_1000serv_500vm.lgr"+
				"\n! Send solution to the file;"+
				"\nSOLUTION"+
				"\n! Close solution file;"+
				"\nRVRT"+
				"\n! Quit LINGO;"+
				"\nQUIT");

		//Grava em arquivo 
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(conf.getArquivoTopologiaLinear(),false));			
			out.write(topologiaLinear.toString());
			out.close();
		} catch(Exception e){
			System.out.println("13Excecao ao gravar no arquivo." + e.getMessage());
		}//fim catch

	}//end gerarModeloLingo

	/*	public void gerarArquivoBrite(){

		System.out.println("\n---Inicio da Geracao Arquivo Brite: " + NUM_NODES + " nodos ---\n");

		//Adquire as informacoes da topologia que foi salva em arquivo
		Configuracao conf = new Configuracao();

		int i=0;
		int j=0;

		//Blocos do arquivo do modelo Lingo
		StringBuffer topologiaLinear = new StringBuffer();		

		topologiaLinear.append(
				"Topology: ( " + NUM_NODES + " Nodes, " + (NUM_NODES-1) + " Edges )"+
						"\nModel: (Linear)"+

				"\n\nNodes: ( " + NUM_NODES + " )");

		//First Node is a Top of Rack (ToR)
		i=0;
		topologiaLinear.append("\n"+(i+1)+"	100	100	1	1	1	AS_NONE");
		i++;

		while(i<NUM_NODES-1){
			topologiaLinear.append("\n"+(i+1)+"	100	100	1	1	1	AS_NONE");
			i++;
		}//end while

		//Last node is a ToR
		topologiaLinear.append("\n"+(i+1)+"	100	100	1	1	1	AS_NONE");


		topologiaLinear.append("\n\n\nEdges: ( "+ (NUM_NODES-1) + " )");

		i=0;
		while(i<(NUM_NODES-1)){
			//1	2	1	1.0	0.1	1000.0	10	1	E_AS_NONE	U
			topologiaLinear.append("\n"+(i+1)+"	"+ (i+1) +	"	"+ (i+2) + "	1.0	0.1	1000.0	10	1	E_AS_NONE	U");					
			i++;
		}//end while


		//Flows
		topologiaLinear.append(
				"\n\n\nFlows:"+
				"\n1	" + NUM_NODES + "	500\n");

		//---Fim da Geracao da Topologia Linear---
		System.out.println("\n---Fim da Geracao do Arquivo Brite---\n");

		//Grava em arquivo 
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(conf.getArquivoTopologiaLinear(),false));			
			out.write(topologiaLinear.toString());
			out.close();
		} catch(Exception e){
			System.out.println("13Excecao ao gravar no arquivo." + e.getMessage());
		}//fim catch

	}//fim gerarModeloLingo
	 */
	/*public void gerarArquivoDatacenter(){

		System.out.println("\n---Inicio da Geracao do Arquivo .datacenter: " + NUM_NODES + " nodos ---\n");

		//Adquire as informacoes da topologia que foi salva em arquivo
		Configuracao conf = new Configuracao();

		int i=0;
		int j=0;

		//Blocos do arquivo do modelo Lingo
		StringBuffer topologiaLinear = new StringBuffer();		

		topologiaLinear.append(
				"Topology: ( " + NUM_NODES + " Nodes, " + (NUM_NODES-1) + " Edges )"+
						"\nModel: (Linear)"+

				"\n\nNodes: ( " + NUM_NODES + " )"+
				"\n#NodeId xpos ypos indegree outdegree ASid type");

		//First Node is a Top of Rack (ToR)
		//i=0;
		//topologiaLinear.append("\n"+(i+1)+"	100	100	1	1	1	AS_NONE");
		//i++;


		i=0;
		while(i<NUM_NODES){
			topologiaLinear.append("\n"+(i+1)+"	100	100	1	1	1	AS_NONE");
			i++;
		}//end while

		//Last node is a ToR
		//21	13	0	0	0	10.1.21.0	TOR
		//topologiaLinear.append("\n"+(i+1)+"	100	100	1	1	1	TOR");


		topologiaLinear.append(
				"\n\n\nEdges: ( "+ (NUM_NODES-1) + " )"+
				"\n#EdgeId From 	To 	CapLink	Delay	Bandwidth QueueLimit ASto Type Other");

		i=0;
		while(i<(NUM_NODES-1)){
			//1	2	1	1.0	0.1	1000.0	10	1	E_AS_NONE	U
			topologiaLinear.append("\n"+(i+1)+"	"+ (i+1) +	"	"+ (i+2) + "	1.0	0.1	1000.0	10	1	E_AS_NONE	U");					
			i++;
		}//end while


		//Flows
		topologiaLinear.append(
				"\n\n\nFlows: sourceTOR destinationTOR aggregatedTraffic\n"+
						"Flows:\n"+
						"1	" + NUM_NODES + "	500\n");

		//---Fim da Geracao da Topologia Linear---
		System.out.println("\n---Fim da Geracao do Arquivo .datacenter---\n");

		//Grava em arquivo 
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(conf.getArquivoTopologiaLinearDatacenter(),false));			
			out.write(topologiaLinear.toString());
			out.close();
		} catch(Exception e){
			System.out.println("13Excecao ao gravar no arquivo." + e.getMessage());
		}//fim catch

	}//fim gerarArquivoDatacenter
	 */

	public static void main(String args[]){

		/*if (args.length!=2){
			System.out.println("Sintax: GeradorTopologiaLinear <NUM_NODES> <LINK_BW>");
			System.exit(0);
		}//end if
		NUM_NODES = Integer.parseInt(args[0]);
		LINK_BW = Integer.parseInt(args[1]);
		 */
		new ModeloLingoTopologiaLinear();
	}

}//fim classe
